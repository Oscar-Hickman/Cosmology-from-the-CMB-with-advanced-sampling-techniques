#Import Packages
import tensorflow as tf
import tensorflow_probability as tfp
import numpy as np
import matplotlib.pyplot as plt
import healpy as hp
%matplotlib inline

#%%
#Gives the resolution at Nside
NSIDE = 4
print("Approximate resolution at NSIDE {} is {:.2} deg".format(NSIDE, hp.nside2resol(NSIDE, arcmin=True) / 60))


#%%
Gives the number of pixels
NPIX = 12*NSIDE**2
print('Number of pixels =',NPIX)


#%%
#RING scheme takes a array where each element is each 
actmap = np.linspace(-10,10,NPIX)
print('actmap =',actmap)
hp.mollview(actmap, title="Mollview image RING")
hp.graticule()


#%%
#anafast creates a map from cl's and synfast creates cls from a map.
actcl = hp.anafast(actmap, lmax=((3*NSIDE)-1))    #lmax = 3NSIDE -1 by default
print('actcl = ', actcl)
ell = np.arange(len(actcl))
plt.figure()
plt.plot(ell, ell * (ell + 1) * actcl)
plt.xlabel("$\ell$")
plt.ylabel("$\ell(\ell+1)actC_{\ell}$")
plt.grid()

#%%
map = []
noisemat = []
for i in range(len(actmap)):
    noisemat.append(np.random.normal(0,1))
    map.append(actmap[i] + noisemat[-1])

map = np.array(map)    
noisemat = np.array(noisemat)
print('map =',map)
    
    
#%%
cl = hp.anafast(map, lmax=((3*NSIDE)-1))
print('cl = ', cl)
ell = np.arange(len(cl))
plt.figure()
plt.plot(ell, ell * (ell + 1) * cl)
plt.xlabel("$\ell$")
plt.ylabel("$\ell(\ell+1)C_{\ell}$")
plt.grid()


#%%
alms = []

for l in range(len(ell)):
    alms.append([])
    
    
    for m in range(len(ell)): #set negative m's
        alms[-1].append([np.random.normal(0,0.5*cl[l]),np.random.normal(0,0.5*cl[m])])
        print('alms =',alms)
    
    alms[-1].append([np.random.normal(0,cl[l]),0.0])        #set m=0
    
    for m in range(len(ell)):                    #set positive m's
        alms[-1].append()


#%%
#negative log of the posterior, psi, ignoring the prior term.
psi =0.5*(d-Ya)(n^-1)*()


#%%
#%%
#Can find indices of all pixels within 10 deg of that point and then change the value of the map at those indices.
ipix_disc = hp.query_disc(nside=NSIDE, vec=vec, radius=np.radians(10))
m = np.arange(NPIX)
m[ipix_disc] = m.max()
hp.mollview(m, title="Mollview image RING")


#%%
#Downloads the higher resolution WMAP data into the current directory.
!healpy_get_wmap_maps.sh
wmap_map_I = hp.read_map("wmap_band_iqumap_r9_7yr_W_v4.fits")
hp.write_map("my_map.fits", wmap_map_I, overwrite=True)


#%%
#
hp.mollview(wmap_map_I,coord=["G", "E"],title="Histogram equalized Ecliptic",unit="mK",norm="hist",min=-1,max=1,)
hp.graticule()
print(len(wmap_map_I))


