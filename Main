#Import Packages
import tensorflow as tf
import tensorflow_probability as tfp
import numpy as np
import matplotlib.pyplot as plt
import healpy as hp
import camb 
from camb import model, initialpower
%matplotlib inline


#%%  #Generate a basic map
def basicgenmap(_strt, _stop, _NSIDE):  # (start, stop, NSIDE)
    _NPIX = 12*_NSIDE**2
    return   np.linspace(_strt,_stop,_NPIX)        #set an array to generate a map


#%% #Downloads the higher resolution WMAP data 
!healpy_get_wmap_maps.sh
wmap_map_I = hp.read_map("wmap_band_iqumap_r9_7yr_W_v4.fits")
hp.write_map("my_map.fits", wmap_map_I, overwrite=True)


#Use CAMB to generate a power spectrum
def call_CAMB_map(_parameters, _lmax): #lmax above 2551 makes no difference?
    '''
    parameters = [H0, ombh2, omch2, mnu, omk, tau]  = [Hubble Const, Baryon density, DM density, 
    Sum 3 neutrino masses/eV, Curvature parameter (Omega kappa), Reionisation optical depth]
    '''
    pars = camb.CAMBparams()
    pars.set_cosmology(H0 = parameters[0], ombh2 = parameters[1], omch2 = parameters[2], mnu = parameters[3],
                   omk = parameters[4], tau = parameters[5])
    pars.InitPower.set_params(As=2e-9, ns=0.965, r=0)
    pars.set_for_lmax(_lmax, lens_potential_accuracy=0)
    results = camb.get_results(pars)
    powers =results.get_cmb_power_spectra(pars, CMB_unit='muK')
    unlensedCL=powers['unlensed_scalar']
    _DL = totCL[:,0]  #gives the lensed scalar cls
    
    _l = np.arange(len(_DL)) #not sure this CL is actually CL but is actually DL
    _CL = []
    for i in range(_lmax): #also limits the length of power spectrum to the requested length
        if i == 0:
            _CL.append(_DL[i]) #since unsure what CL value is for this DL
        
        else:
            _CL.append(_DL[i]/(_l[i]*(_l[i] + 1)))
        
    _CL = np.array(_CL)    
    
    return _CL


#%% #PLots a map in the aithoff projection 
def aithoffmap(_map):
    hp.mollview(_map, title="Map displayed in the Aithoff projection", cmap = None)
    hp.graticule()

#%%  #Gives the resolution for an NSIDE and the number of pixels.
def basicmapdet(_NSIDE, _NPIX):     
    print("Approximate resolution at NSIDE {} is {:.2} deg".format(_NSIDE, hp.nside2resol(_NSIDE, arcmin=True) / 60))
    print('Number of pixels =',_NPIX)


#%% #Generate a map given a power spectrum
def genmap(_cls, _NSIDE):   
    return hp.synfast(_cls, _NSIDE, new = True)



#Generate a power spectrum given cls
def gencls(_map):
    return hp.anafast(_map, lmax=int(((3*(len(_map)/12)**0.5)-1)), new = True)    #lmax = 3NSIDE -1 by default


#Plots a given power spectrum 
def plotpwrspctrm(_cls):
    _l = np.arange(len(_cls))
    plt.figure()
    plt.plot(_l, _l * (_l + 1) * _cls)
    plt.xlabel("$\l$")
    plt.ylabel("$\l(\l+1)C_{\l}$")
    plt.grid()
    plt.title("Power Spectrum")
    plt.show()


#%% #Adds random noise to each pixel on a map given a variance 
def noisemap(_map,_var):
    _newmap = []
    _noisevec = []
    for i in range(len(_map)):
        _noisevec.append(np.random.normal(0,_var))
        _newmap.append(_map[i] + _noisevec[-1])
    _newmap = np.array(_newmap)    
    _noisevec = np.array(_noisevec)
    return [_newmap, _noisevec]


#%% #Generate alms given cls
def genalms1(_cls, _NSIDE): #does this manually
    _alms = []
    _lmax = (3*_NSIDE) - 1
    for l in range(_lmax):
        _alms.append([]) 
        for m in range(_lmax): #set negative m's
            _alms[-1].append([np.random.normal(0,0.5*_cls[l]),np.random.normal(0,0.5*_cls[m])])
        _alms[-1].append([np.random.normal(0,_cls[l]),0.0])        #set m=0
        for m in range(_lmax):                    #set positive m's = -m's
            _alms[-1].append([_alms[l][(_lmax-m-1)][0]])
            _alms[-1][-1].append(-1.0*_alms[l][_lmax-m-1][-1])   #set imag part of positive m's = c.c. of negative m's.
    return _alms   


def genalms2(_cls, _NSIDE): #does this automatically
    return hp.synalm(_cls, lmax = ((3*_NSIDE)-1), new = True)


#%%
def estimate_cl(_alm):


#%% #negative log of the posterior, psi, ignoring the prior term.
#psi =0.5*(d-Ya)(n^-1)*()


#%% #Input Code:
parameters = [67.74, 0.0486, 0.2589, 0.06, 0.0, 0.066]
lmax = 1536 
cls1 = call_CAMB_map(parameters, lmax)
plotpwrspctrm(cls1)
NSIDE = 512  #len(cls1)/3   #3*nside = len(cls)
map1 = genmap(cls1, NSIDE) 
aithoffmap(map1)
noisemap1 = noisemap(map1,0.05)
aithoffmap(noisemap1[0])
alms1 = genalms2(noisemap1[0],32)


